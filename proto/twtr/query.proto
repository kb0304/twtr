syntax = "proto3";
package kb0304.twtr.twtr;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "twtr/params.proto";
import "twtr/tweet.proto";
import "twtr/profile.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/kb0304/twtr/x/twtr/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/kb0304/twtr/twtr/params";
  }
  // Queries a list of Tweets items.
	rpc Tweets(QueryTweetsRequest) returns (QueryTweetsResponse) {
		option (google.api.http).get = "/kb0304/twtr/twtr/tweets";
	}

// Queries a Profile by index.
	rpc Profile(QueryGetProfileRequest) returns (QueryGetProfileResponse) {
		option (google.api.http).get = "/kb0304/twtr/twtr/profile/{user}";
	}

	// Queries a list of Profile items.
	rpc ProfileAll(QueryAllProfileRequest) returns (QueryAllProfileResponse) {
		option (google.api.http).get = "/kb0304/twtr/twtr/profile";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryTweetsRequest {
  // Adding pagination to request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryTweetsResponse {
  // Returning a list of tweets
  repeated Tweet Tweet = 1;
  // Adding pagination to response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetProfileRequest {
	  string user = 1;

}

message QueryGetProfileResponse {
	Profile profile = 1 [(gogoproto.nullable) = false];
}

message QueryAllProfileRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProfileResponse {
	repeated Profile profile = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
